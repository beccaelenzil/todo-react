{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/becca/GitHub/learn_flask/todo-list-project/todo-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport NewTaskForm from './components/NewTaskForm';\nimport TaskList from './components/TaskList';\n\nfunction App() {\n  _s();\n\n  const [taskList, setTaskList] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/\").then(response => {\n      const apiTaskList = response.data;\n      setTaskList(apiTaskList);\n    }).catch(error => {\n      setErrorMessage(error.message);\n      console.log(error.message);\n    });\n  }, []);\n\n  const addTask = task => {\n    // const newTaskList = [...taskList];\n    // const nextId = Math.max(...newTaskList.map(task => task.id)) + 1\n    // newTaskList.push({\n    //   id: nextId,\n    //   title: task.title,\n    //   content: task.content,\n    //   complete: false,\n    // });\n    axios.post(\"http://localhost:5000/tasks\", task).then(response => {\n      // What should we do when we know the post request worked?\n      const newTasks = [...taskList, response.data];\n      setTaskList(newTasks);\n      setErrorMessage('');\n    }).catch(error => {\n      // What should we do when we know the post request failed?\n      setErrorMessage(error.message);\n    });\n  };\n\n  const updateTask = updatedTask => {\n    const tasks = [];\n    taskList.forEach(task => {\n      if (task.id === updatedTask.id) {\n        console.log(updatedTask.title);\n        tasks.push(updatedTask);\n      } else {\n        tasks.push(task);\n      }\n    });\n    setTaskList(tasks);\n  };\n\n  const deleteTask = deletedTask => {\n    const tasks = [];\n    taskList.forEach(task => {\n      if (task.id !== deletedTask.id) {\n        tasks.push(task);\n      }\n    });\n    setTaskList(tasks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"error-msg\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 24\n    }, this) : '', /*#__PURE__*/_jsxDEV(NewTaskForm, {\n      addTaskCallback: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: taskList,\n      onUpdateTask: updateTask,\n      onDeleteTask: deleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Dt2KMY1KId49OEeyCgbf2i5WJOw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/becca/GitHub/learn_flask/todo-list-project/todo-react/src/App.js"],"names":["React","useState","useEffect","axios","NewTaskForm","TaskList","App","taskList","setTaskList","errorMessage","setErrorMessage","get","then","response","apiTaskList","data","catch","error","message","console","log","addTask","task","post","newTasks","updateTask","updatedTask","tasks","forEach","id","title","push","deleteTask","deletedTask"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './App.css';\nimport axios from 'axios';\nimport NewTaskForm from './components/NewTaskForm';\nimport TaskList from './components/TaskList'\n\n\nfunction App() {\n  const [taskList, setTaskList] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() =>{\n    axios.get(\"http://localhost:5000/\")\n      .then((response) => {\n        const apiTaskList = response.data\n        setTaskList(apiTaskList)\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n        console.log(error.message);\n      });\n    }, []);\n\n  const addTask = (task) => {\n    // const newTaskList = [...taskList];\n\n    // const nextId = Math.max(...newTaskList.map(task => task.id)) + 1\n\n    // newTaskList.push({\n    //   id: nextId,\n    //   title: task.title,\n    //   content: task.content,\n    //   complete: false,\n    // });\n\n\n    axios.post(\"http://localhost:5000/tasks\", task)\n      .then((response) => {\n        // What should we do when we know the post request worked?\n        const newTasks = [...taskList, response.data]\n        setTaskList(newTasks);\n        setErrorMessage('');\n\n\n      })\n      .catch((error) => {\n        // What should we do when we know the post request failed?\n        setErrorMessage(error.message);\n      });\n  }\n\n  const updateTask = (updatedTask) => {\n    const tasks = [];\n\n    taskList.forEach((task) => {\n      \n      if (task.id === updatedTask.id) {\n        console.log(updatedTask.title)\n        tasks.push(updatedTask);\n      } else {\n        tasks.push(task);\n      }\n    });\n\n    setTaskList(tasks);\n  }\n\n  const deleteTask = (deletedTask) => {\n    const tasks = [];\n\n    taskList.forEach((task) => {\n      \n      if (task.id !== deletedTask.id) {\n        tasks.push(task);\n      }\n    });\n\n    setTaskList(tasks);\n  }\n\n  return (\n    <div className=\"App\">\n      { errorMessage ? <div><h2 className=\"error-msg\">{errorMessage}</h2></div> : '' }\n      <NewTaskForm addTaskCallback={addTask}/>\n      <TaskList \n        tasks={taskList} \n        onUpdateTask={updateTask}\n        onDeleteTask={deleteTask}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}